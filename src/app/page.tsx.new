"use client";

import React, { useState, useEffect, useRef } from 'react';
import { Sparkles, ArrowRight, Zap, ChevronDown, Brain } from 'lucide-react';

// --- Animated Background Component ---
const AnimatedBackground = () => {
  const canvasRef = useRef(null);
  
  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    let animationFrameId;
    let time = 0;
    
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };
    
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    const particles = [];
    for (let i = 0; i < 80; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 0.4,
        vy: (Math.random() - 0.5) * 0.4,
        size: Math.random() * 3 + 0.5,
        hue: Math.random() * 300 + 180, // Wide range of colors
      });
    }
    
    const animate = () => {
      time += 0.005;
      
      // Create complex gradient background
      const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
      gradient.addColorStop(0, `hsl(${230 + Math.sin(time) * 30}, 60%, 20%)`);
      gradient.addColorStop(0.2, `hsl(${260 + Math.cos(time * 1.3) * 25}, 65%, 15%)`);
      gradient.addColorStop(0.4, `hsl(${290 + Math.sin(time * 0.7) * 35}, 70%, 22%)`);
      gradient.addColorStop(0.6, `hsl(${220 + Math.cos(time * 1.1) * 20}, 55%, 18%)`);
      gradient.addColorStop(0.8, `hsl(${270 + Math.sin(time * 1.5) * 30}, 60%, 25%)`);
      gradient.addColorStop(1, `hsl(${240 + Math.cos(time * 0.8) * 25}, 58%, 20%)`);
      
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // Update and draw particles
      particles.forEach((particle, i) => {
        particle.x += particle.vx + Math.sin(time + i * 0.3) * 0.1;
        particle.y += particle.vy + Math.cos(time + i * 0.5) * 0.1;
        
        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;
        
        particle.x = Math.max(0, Math.min(canvas.width, particle.x));
        particle.y = Math.max(0, Math.min(canvas.height, particle.y));
        
        const alpha = 0.3 + Math.sin(time + i) * 0.4;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fillStyle = `hsla(${particle.hue + time * 50}, 80%, 70%, ${alpha})`;
        ctx.fill();
        
        // Add glow effect
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size * 2, 0, Math.PI * 2);
        ctx.fillStyle = `hsla(${particle.hue + time * 50}, 90%, 80%, ${alpha * 0.2})`;
        ctx.fill();
        
        // Connect nearby particles
        particles.slice(i + 1).forEach(other => {
          const dx = particle.x - other.x;
          const dy = particle.y - other.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 150) {
            ctx.beginPath();
            ctx.moveTo(particle.x, particle.y);
            ctx.lineTo(other.x, other.y);
            ctx.strokeStyle = `hsla(${particle.hue + time * 50}, 75%, 65%, ${0.15 * (1 - distance / 150)})`;
            ctx.lineWidth = 1;
            ctx.stroke();
          }
        });
      });
      
      animationFrameId = requestAnimationFrame(animate);
    };
    
    animate();
    
    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationFrameId);
    };
  }, []);
  
  return (
    <canvas
      ref={canvasRef}
      className="fixed inset-0 w-full h-full z-0"
      style={{ background: 'linear-gradient(135deg, #1e1b4b 0%, #312e81 20%, #6366f1 40%, #8b5cf6 60%, #a855f7 80%, #1e1b4b 100%)' }}
    />
  );
};

// --- Reusable Animated Component ---
const AnimatedSection = ({ children, delay = 0 }) => {
    const [isVisible, setIsVisible] = useState(false);
    const ref = useRef(null);

    useEffect(() => {
        const observer = new IntersectionObserver(
            ([entry]) => {
                if (entry.isIntersecting) {
                    setIsVisible(true);
                    observer.disconnect();
                }
            },
            { threshold: 0.1 }
        );

        if (ref.current) observer.observe(ref.current);
        return () => {
            if (ref.current) observer.unobserve(ref.current);
        };
    }, []);

    return (
        <div
            ref={ref}
            className={`transition-all duration-700 ease-out ${
                isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-5'
            }`}
            style={{
                transitionDelay: `${delay * 100}ms`
            }}
        >
            {children}
        </div>
    );
};

// Custom typing animation component
const TypeAnimation = () => {
  const [currentText, setCurrentText] = useState('');
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isDeleting, setIsDeleting] = useState(false);
  
  const texts = [
    'Software Engineering Student',
    'Full-Stack Developer',
    'Robotics Engineer',
    'Innovator & Problem Solver'
  ];
  
  useEffect(() => {
    const timeout = setTimeout(() => {
      const current = texts[currentIndex];
      
      if (!isDeleting) {
        setCurrentText(current.substring(0, currentText.length + 1));
        
        if (currentText === current) {
          setTimeout(() => setIsDeleting(true), 2000);
        }
      } else {
        setCurrentText(current.substring(0, currentText.length - 1));
        
        if (currentText === '') {
          setIsDeleting(false);
          setCurrentIndex((prev) => (prev + 1) % texts.length);
        }
      }
    }, isDeleting ? 50 : 100);
    
    return () => clearTimeout(timeout);
  }, [currentText, currentIndex, isDeleting, texts]);
  
  return (
    <span>
      {currentText}
      <span className="inline-block w-0.5 h-8 bg-white ml-1 animate-pulse">&nbsp;</span>
    </span>
  );
};

// --- Data for Featured Projects ---
const featuredProjects = [
  {
    title: "Spin State (Project Pulsor)",
    category: "Full-Stack",
    description: "Designed and deployed a full-stack platform from scratch to enable seamless collaboration among scientists and engineers.",
    tech: ["React.js", "Node.js", "Docker", "MongoDB"],
    link: "/projects"
  },
  {
    title: "Automated Harbor Prototype",
    category: "Robotics",
    description: "Engineered a functional, scaled-down model of an automated harbor, integrating robotics and mechatronics to earn 4th place in a national competition.",
    tech: ["Robotics", "Mechatronics", "System Integration"],
    link: "/projects"
  },
];

export default function HomePage() {
  return (
    <div className="min-h-screen w-full relative bg-gradient-to-br from-indigo-950 via-purple-900 to-blue-900">
      <AnimatedBackground />
      
      <div className="relative z-10 pt-20">
        {/* Hero Section */}
        <section className="min-h-screen flex items-center justify-center px-6 py-20 text-center">
          <div className="max-w-7xl mx-auto">
              <AnimatedSection>
                  <h1 className="text-6xl md:text-8xl lg:text-9xl font-black mb-8 leading-tight">
                    <span className="block bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 bg-clip-text text-transparent">
                      KRISHNA
                    </span>
                    <span className="block bg-gradient-to-r from-green-400 via-blue-500 to-purple-600 bg-clip-text text-transparent">
                      THIRUMALAI
                    </span>
                  </h1>
              </AnimatedSection>
              
              <AnimatedSection delay={2}>
                  <div className="text-2xl md:text-4xl lg:text-5xl font-light text-gray-200 mb-8 h-16 md:h-20">
                      <span className="bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent">
                        <TypeAnimation />
                      </span>
                  </div>
              </AnimatedSection>
              
              <AnimatedSection delay={4}>
                  <p className="text-lg md:text-xl lg:text-2xl text-gray-200 max-w-5xl mx-auto mb-12 leading-relaxed">
                    From architecting <span className="text-purple-300 font-semibold">full-stack collaborative platforms</span> with React and Node.js to engineering <span className="text-green-300 font-semibold">competition-winning automated robotics</span>, I thrive on transforming complex technical challenges into high-performance, scalable solutions.
                  </p>
              </AnimatedSection>
              
              <AnimatedSection delay={6}>
                  <div className="flex flex-col sm:flex-row items-center justify-center gap-6 mb-16">
                    <a href="/projects" className="group relative px-8 py-4 bg-gradient-to-r from-blue-500 via-purple-600 to-pink-500 rounded-xl font-bold text-lg transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-purple-500/50">
                      <span className="relative z-10 flex items-center space-x-3">
                        <Sparkles size={24} />
                        <span>Explore My Projects</span>
                      </span>
                    </a>
                    <a href="/contact" className="group px-8 py-4 bg-white/10 backdrop-blur-xl border border-white/20 rounded-xl font-bold text-lg hover:bg-white/20 transition-all duration-300 hover:scale-105">
                      <span className="relative z-10 flex items-center space-x-3">
                        <Zap size={24} />
                        <span>Get In Touch</span>
                      </span>
                    </a>
                  </div>
              </AnimatedSection>
              
              <div className="mt-20">
                  <a href="#about-snippet" className="flex flex-col items-center space-y-2 text-gray-400 text-sm hover:text-white transition-colors duration-300">
                      <span>Discover more</span>
                      <ChevronDown size={28} className="animate-bounce" />
                  </a>
              </div>
          </div>
        </section>

        {/* About Me Snippet */}
        <section id="about-snippet" className="py-20 px-6">
          <AnimatedSection>
              <div className="max-w-4xl mx-auto text-center p-8 bg-white/5 backdrop-blur-xl border border-white/10 rounded-3xl hover:bg-white/10 transition-all duration-300">
                  <Brain className="mx-auto h-12 w-12 text-cyan-400 mb-6"/>
                  <h2 className="text-3xl md:text-4xl font-bold text-white mb-6">A Multi-Disciplinary Approach</h2>
                  <p className="text-lg text-gray-200 leading-relaxed">
                      I am a software engineering student with a deep passion for building intelligent systems. My work spans the full stack of web development, from crafting responsive user interfaces with React to architecting robust back-end services, and extends into the physical world with robotics and mechatronics.
                  </p>
              </div>
          </AnimatedSection>
        </section>

        {/* Featured Projects Section */}
        <section className="py-20 px-6">
          <div className="max-w-7xl mx-auto">
              <AnimatedSection>
                  <div className="text-center mb-16">
                      <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">Featured Projects</h2>
                      <p className="text-lg text-gray-300">A glimpse into my recent work.</p>
                  </div>
              </AnimatedSection>
              
              <div className="grid md:grid-cols-2 gap-8">
                  {featuredProjects.map((project, index) => (
                      <AnimatedSection key={project.title} delay={index + 2}>
                          <a href={project.link} className="group block h-full p-6 bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl transition-all duration-300 hover:bg-white/10 hover:-translate-y-2 hover:border-purple-400/50">
                              <h3 className="text-xl font-bold text-white mb-2 group-hover:text-purple-300 transition-colors">{project.title}</h3>
                              <p className="text-sm font-semibold text-cyan-400 mb-3">{project.category}</p>
                              <p className="text-gray-200 mb-4 text-sm">{project.description}</p>
                              <div className="flex flex-wrap gap-2 mb-4">
                                  {project.tech.map(tech => (
                                      <span key={tech} className="px-2 py-1 bg-blue-500/20 text-cyan-300 rounded text-xs border border-cyan-500/30">{tech}</span>
                                  ))}
                              </div>
                              <span className="font-semibold text-purple-300 flex items-center space-x-2 group-hover:text-white transition-colors text-sm">
                                  <span>View Details</span>
                                  <ArrowRight size={14} className="group-hover:translate-x-1 transition-transform"/>
                              </span>
                          </a>
                      </AnimatedSection>
                  ))}
              </div>
          </div>
        </section>

        {/* Final CTA */}
        <section className="py-20 px-6 text-center">
          <AnimatedSection>
              <div className="p-8 bg-white/5 backdrop-blur-xl border border-white/10 rounded-3xl max-w-4xl mx-auto">
                  <Sparkles className="mx-auto h-12 w-12 text-yellow-400 mb-6"/>
                  <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">Have an Idea?</h2>
                  <p className="text-lg text-gray-200 max-w-2xl mx-auto mb-8">
                      I'm always ready for the next challenge. Let's build something amazing together.
                  </p>
                  <a href="/contact" className="inline-flex items-center justify-center px-8 py-4 bg-gradient-to-r from-purple-500 via-pink-500 to-red-500 rounded-xl font-bold text-lg transition-all duration-300 hover:scale-105">
                      <span>Let's Build Together</span>
                  </a>
              </div>
          </AnimatedSection>
        </section>
      </div>
    </div>
  );
}